package simpledb;

import java.util.*;

/**
 * The Join operator implements the relational join operation.
 */
public class Join extends Operator {

    private static final long serialVersionUID = 1L;
    private DbIterator[] children;
    private JoinPredicate joinPredicate;
    private Tuple outNext = null;
    private Tuple inNext = null;
    /**
     * Constructor. Accepts to children to join and the predicate to join them
     * on
     * 
     * @param p
     *            The predicate to use to join the children
     * @param child1
     *            Iterator for the left(outer) relation to join
     * @param child2
     *            Iterator for the right(inner) relation to join
     */
    public Join(JoinPredicate p, DbIterator child1, DbIterator child2) {
        // some code goes here
        this.joinPredicate = p;
        this.children = new DbIterator[2];
        this.children[0] = child1;
        this.children[1] = child2;
    }

    public JoinPredicate getJoinPredicate() {
        // some code goes here
        return this.joinPredicate;
    }

    /**
     * @return
     *       the field name of join field1. Should be quantified by
     *       alias or table name.
     * */
    public String getJoinField1Name() {
        // some code goes here
        return this.children[0].getTupleDesc().getFieldName(this.joinPredicate.getField1());
    }

    /**
     * @return
     *       the field name of join field2. Should be quantified by
     *       alias or table name.
     * */
    public String getJoinField2Name() {
        // some code goes here
        return this.children[1].getTupleDesc().getFieldName(this.joinPredicate.getField2());
    }

    /**
     * @see simpledb.TupleDesc#merge(TupleDesc, TupleDesc) for possible
     *      implementation logic.
     */
    public TupleDesc getTupleDesc() {
        // some code goes here
        TupleDesc td1 = children[0].getTupleDesc();
        TupleDesc td2 = children[1].getTupleDesc();
        return TupleDesc.merge(td1, td2);
    }

    public void open() throws DbException, NoSuchElementException,
            TransactionAbortedException {
        // some code goes here
        super.open();
        children[0].open();
        children[1].open();
    }

    public void close() {
        // some code goes here
        super.close();
        children[0].close();
        children[1].close();
    }

    public void rewind() throws DbException, TransactionAbortedException {
        // some code goes here
        children[0].rewind();
        children[1].rewind();
        inNext = null;
        outNext = null;
    }

    /**
     * Returns the next tuple generated by the join, or null if there are no
     * more tuples. Logically, this is the next tuple in r1 cross r2 that
     * satisfies the join predicate. There are many possible implementations;
     * the simplest is a nested loops join.
     * <p>
     * Note that the tuples returned from this particular implementation of Join
     * are simply the concatenation of joining tuples from the left and right
     * relation. Therefore, if an equality predicate is used there will be two
     * copies of the join attribute in the results. (Removing such duplicate
     * columns can be done with an additional projection operator if needed.)
     * <p>
     * For example, if one tuple is {1,2,3} and the other tuple is {1,5,6},
     * joined on equality of the first column, then this returns {1,2,3,1,5,6}.
     * 
     * @return The next matching tuple.
     * @see JoinPredicate#filter
     */

    private Tuple mergeTuple(TupleDesc td, Tuple a, Tuple b){
        Tuple ret = new Tuple(td);
        int nf1 = a.getTupleDesc().numFields();
        int nf2 = b.getTupleDesc().numFields();
        for (int i = 0; i < nf1; ++i) ret.setField(i, a.getField(i));
        for (int i = nf1; i < nf1 + nf2; ++i) ret.setField(i, b.getField(i - nf1));
        return ret;
    }

    protected Tuple fetchNext() throws TransactionAbortedException, DbException {
        // some code goes here
        TupleDesc td = getTupleDesc();
        while(children[0].hasNext() || children[1].hasNext()){
            if ((!children[1].hasNext()) || outNext == null) {
                outNext = children[0].next();
                children[1].rewind();
            }
            while (children[1].hasNext()) {
                inNext = children[1].next();
                if (this.joinPredicate.filter(outNext, inNext)) {
                    return mergeTuple(td, outNext, inNext);
                }
            }
        }
        return null;
    }

    @Override
    public DbIterator[] getChildren() {
        // some code goes here
        return children;
    }

    @Override
    public void setChildren(DbIterator[] children) {
        // some code goes here
        this.children = children;
    }

}
