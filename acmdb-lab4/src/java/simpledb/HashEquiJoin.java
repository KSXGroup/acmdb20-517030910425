package simpledb;

import java.util.*;

/**
 * The Join operator implements the relational join operation.
 */
public class HashEquiJoin extends Operator {

    private static final long serialVersionUID = 1L;
    private DbIterator[] children;
    private JoinPredicate joinPredicate;
    private HashMap<Field, ArrayList<Tuple>> hashMap;
    private static final int SIZE = 10000;
    private TupleDesc ctd;
    private Tuple out;
    private Tuple in;
    private int curSize;
    /**
     * Constructor. Accepts to children to join and the predicate to join them
     * on
     * 
     * @param p
     *            The predicate to use to join the children
     * @param child1
     *            Iterator for the left(outer) relation to join
     * @param child2
     *            Iterator for the right(inner) relation to join
     */

    public HashEquiJoin(JoinPredicate p, DbIterator child1, DbIterator child2) {
        // some code goes here
        this.joinPredicate = p;
        this.children = new DbIterator[2];
        this.children[0] = child1;
        this.children[1] = child2;
        this.hashMap = new HashMap<Field, ArrayList<Tuple>>();
        this.out = null;
        this.in = null;
        this.curSize = 0;
        this.ctd = TupleDesc.merge(child1.getTupleDesc(), child2.getTupleDesc());
    }


    private boolean clearAndLoad() throws DbException, TransactionAbortedException{
        this.hashMap.clear();
        this.curSize = 0;
        Tuple tmp;
        while(this.children[0].hasNext()){
            tmp = this.children[0].next();
            Field f = tmp.getField(this.joinPredicate.getField1());
            ArrayList<Tuple> lst = this.hashMap.computeIfAbsent(f, k -> new ArrayList<Tuple>());
            lst.add(tmp);
            this.curSize += 1;
        }
        return this.curSize > 0;
    }

    public JoinPredicate getJoinPredicate() {
        // some code goes here
        return joinPredicate;
    }

    public TupleDesc getTupleDesc() {
        // some code goes here
        return this.ctd;
    }
    
    public String getJoinField1Name()
    {
        // some code goes here
        return children[0].getTupleDesc().getFieldName(this.joinPredicate.getField1());
    }

    public String getJoinField2Name()
    {
        // some code goes here
        return children[1].getTupleDesc().getFieldName(this.joinPredicate.getField2());
    }
    
    public void open() throws DbException, NoSuchElementException,
            TransactionAbortedException {
        // some code goes here
        super.open();
        this.children[0].open();
        this.children[1].open();
    }

    public void close() {
        // some code goes here
        super.close();
        this.children[0].close();
        this.children[1].close();
        this.curSize = 0;
        this.out = null;
        this.in = null;
    }

    public void rewind() throws DbException, TransactionAbortedException {
        // some code goes here
        this.children[0].rewind();
        this.children[1].rewind();
        this.curSize = 0;
        this.out = null;
        this.in = null;
    }

    transient Iterator<Tuple> listIt = null;

    /**
     * Returns the next tuple generated by the join, or null if there are no
     * more tuples. Logically, this is the next tuple in r1 cross r2 that
     * satisfies the join predicate. There are many possible implementations;
     * the simplest is a nested loops join.
     * <p>
     * Note that the tuples returned from this particular implementation of Join
     * are simply the concatenation of joining tuples from the left and right
     * relation. Therefore, there will be two copies of the join attribute in
     * the results. (Removing such duplicate columns can be done with an
     * additional projection operator if needed.)
     * <p>
     * For example, if one tuple is {1,2,3} and the other tuple is {1,5,6},
     * joined on equality of the first column, then this returns {1,2,3,1,5,6}.
     * 
     * @return The next matching tuple.
     * @see JoinPredicate#filter
     */

    private Tuple mergeTuple(Tuple a, Tuple b){
        Tuple ret = new Tuple(this.ctd);
        int nf1 = a.getTupleDesc().numFields();
        int nf2 = b.getTupleDesc().numFields();
        for (int i = 0; i < nf1; ++i) ret.setField(i, a.getField(i));
        for (int i = nf1; i < nf1 + nf2; ++i) ret.setField(i, b.getField(i - nf1));
        return ret;
    }

    protected Tuple fetchNext() throws TransactionAbortedException, DbException {
        // some code goes here

        if(this.listIt != null && this.listIt.hasNext()){
            out = this.listIt.next();
            return mergeTuple(out, in);
        }

        while(this.children[1].hasNext()){
            this.in = this.children[1].next();
            ArrayList<Tuple> lst = this.hashMap.get(this.in.getField(this.joinPredicate.getField1()));
            if(lst != null) {
                this.listIt = lst.iterator();
                return fetchNext();
            }
        }

        this.children[1].rewind();
        if(clearAndLoad()) return fetchNext();
        return null;
    }

    @Override
    public DbIterator[] getChildren() {
        // some code goes here
        return this.children;
    }

    @Override
    public void setChildren(DbIterator[] children) {
        // some code goes here
        this.children = children;
    }
    
}
